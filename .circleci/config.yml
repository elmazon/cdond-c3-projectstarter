version: 2.1

commands:
  exit-pipeline:
    description: exit pipeline if job fails
    steps:
      - run:
          name: exit pipeline
          when: on_fail
          command: |
            exit 1
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
       workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name uda-backend-stack-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name uda-frontend-stack-<< parameters.workflow_id >>
            

 # revert-migrations:
  #  description: Revert the last migration if successfully run in the current workflow.
   # parameters:
      # #Add parameter here     
    #steps:
     # - run:
      #    name: Revert migrations
          # Add when this will run
       #   command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
        #    SUCCESS = 1
         #   if(( $SUCCESS==1 )); 
          #  then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
           #   exit 1
            #fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i   
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - exit-pipeline    

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i 
            npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - exit-pipeline    

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-test
      - run: 
         name: frontend test 
         no_output_timeout: 30m    
         command: |
            cd frontend
            npm i 
            npm run test 
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-test         
      - exit-pipeline 
      

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-test
      - run : 
          name : backend test  
          command: |
            cd backend
            npm i 
            npm run test 
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-test  
      - exit-pipeline   

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
         keys:
           - scan-frontend
      - run:
          name: frontend scan for vulnerability
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force

      - save_cache:
          paths:
            - frontend/node_modules
          key: scan-frontend
      - exit-pipeline   

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - scan-backend
      - run:
          name: backend scan for vulnerability
          command: |
            cd backend
            npm i 
            npm audit fix --audit-level=critical 
      - save_cache:
          paths:
            - backend/node_modules
          key: scan-backend      
      - exit-pipeline   

  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar
      - run: yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=uda_backend \
            --stack-name "uda-backend-stack-${CIRCLE_WORKFLOW_ID}" \
            --parameter-overrides "ID=${CIRCLE_WORKFLOW_ID}" 
              
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=uda_frontend \
            --stack-name "uda-frontend-stack-${CIRCLE_WORKFLOW_ID}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
              
           
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - exit-pipeline      
      - destroy-environment: 
         workflow_id: ${CIRCLE_WORKFLOW_ID}     

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "eb:57:a0:9b:fb:9d:da:32:45:d4:52:92:1a:86:6f:2f"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Set up env vars for ec2 instance to use
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo NODE_ENV=production >> backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend.env
            echo TYPEORM_HOST=${TYPEORM_HOST} >> backend/.env
            echo TYPEORM_PORT=${TYPEORM_PORT} >> backend/.env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> backend/.env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> backend/.env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> backend/.env
            cat backend/.env        
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            ansible-playbook -i ~/Git/cdond-c3-projectstarter/.circleci/ansible/inventory.txt /root/project/.circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Set up env vars for migrations job
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo NODE_ENV=production >> backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend.env
            echo TYPEORM_HOST=${TYPEORM_HOST} >> backend/.env
            echo TYPEORM_PORT=${TYPEORM_PORT} >> backend/.env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> backend/.env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> backend/.env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> backend/.env
            cat backend/.env
      - run:
          name: Run migrations
          command: |
            cd backend
            #npm install
            #npm run build
            npm run migrations > ~/migration_output.txt
            #echo "test" > ~/migration_output.txt
            cat ~/migration_output.txt
      - run:
          name: Send migration results to memstash
          command: |
            export RES=`grep "has been executed successfully" ~/migration_output.txt | wc -l`
            echo ${RES}
            echo ${MEMSTASH_KEY}
            echo ${CIRCLE_WORKFLOW_ID}
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_KEY}" --request PUT --data "${RES}" https://api.memstash.io/values/Maaz_${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}    

  #deploy-frontend:
   # docker:
      # Docker image here that supports AWS CLI
    #steps:
      # Checkout code from git
     # - run:
      #    name: Install dependencies
       #   command: |
            # your code here
      #- run:
        #  name: Get backend url
       #   command: |
            # your code here
         #   export API_URL="http://${BACKEND_IP}:3030"
          #  echo "${API_URL}"
      #- run:
       #   name: Deploy frontend objects
        #  command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  #deploy-backend:
   # docker:
      # Docker image here that supports Ansible
    #steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
     # - run:
      #    name: Install dependencies
       #   command: |
            # your code here
      #- run:
       #   name: Deploy backend
        #  command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  #smoke-test:
   # docker:
      # Lightweight Docker image 
    #steps:
      # Checkout code from git
     # - run:
      #    name: Install dependencies
       #   command: |
            # your code here
      #- run:
       #   name: Get backend url
        #  command: |
            # your code here
      #- run:
       #   name: Backend smoke test.
        #  command: |
            # your code here
      #- run:
       #   name: Frontend smoke test.
        #  command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

 # cloudfront-update:
  #  docker:
      # Docker image here that supports AWS CLI
   # steps:
      # Checkout code from git
    #  - run:
     #     name: Install dependencies
      #    command: |
            # your code here
      #- run:
       #   name: Update cloudfront distribution
        #  command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

#cleanup:
 #   docker:
      # Docker image here
  #  steps:
      # Checkout code from git
   #   - run:
    #      name: Get old stack workflow id
     #     command: |
            # your code here
      #      export OldWorkflowID="the id here"
       #     export STACKS=[] #put the list of stacks here
      #- run:
       #   name: Remove old stacks and files
        #  command: |
         #   if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
          #  then
              # your code here
           # fi
            

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
       #   requires: [build-frontend]
      #- test-backend:
       #   requires: [build-backend]
      #- scan-backend:
       #   requires: [build-backend]
      #- scan-frontend:
       #   requires: [build-frontend]
      - deploy-infrastructure:
       #   requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
          context: AWS    
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: AWS
      - run-migrations:
          requires: [configure-infrastructure]
          context: AWS
      #- deploy-frontend:
       #   requires: [run-migrations]
      #- deploy-backend:
       #   requires: [run-migrations]
      #- smoke-test:
       #   requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
       #   requires: [smoke-test]
      #- cleanup:
       #   requires: [cloudfront-update]